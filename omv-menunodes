#!/bin/bash

#set -e
#set -x

################################################################################

SCRIPTDIR=$(cd `dirname "$0"` && pwd)

# Folders
ROOTDIR=""
CACHEDIR="/var/cache/openmediavault"

# Cache
CLEAN=1
CLEAN_OVERRIDES=1

# Functions
LIST_NODE_ENTRYS=1
LIST_PANEL_ENTRYS=1
LIST_NODE_OVERRIDES=1
LIST_PANEL_OVERRIDES=1
LIST_NODE=1
LIST_PANEL=1
LIST_ALL=1

while getopts ":r:o:cCnpNPlLA" opt; do
	case $opt in
		
		# Folders
		r) ROOTDIR="$OPTARG" ;;
		o) CACHEDIR="$OPTARG" ;;
		
		# Cache
		c) CLEAN=0 ;;
		C) CLEAN_OVERRIDES=0 ;;
		
		# Functions
		n) LIST_NODE_ENTRYS=0 ;;
		p) LIST_PANEL_ENTRYS=0 ;;
		N) LIST_NODE_OVERRIDES=0 ;;
		P) LIST_PANEL_OVERRIDES=0 ;;
		l) LIST_NODE=0 ;;
		L) LIST_PANEL=0 ;;
		A) LIST_ALL=0 ;;
		
		\?) echo "Invalid option: -$OPTARG" >&2 && exit 1 ;;
		:) echo "Option -$OPTARG requires an argument." >&2 && exit 1 ;;
	esac
done

MODULEDIR="${ROOTDIR}/var/www/openmediavault/js/omv/module"
NODE_CACHE_FILE="${CACHEDIR}/cached_module_nodes.json"
PANEL_CACHE_FILE="${CACHEDIR}/cached_module_panels.json"

OVERRIDEDIR="${ROOTDIR}/var/www/openmediavault/js/omv/module_override"
NODE_OVERRIDE_FILE="${CACHEDIR}/cached_module_override_nodes.json"
PANEL_OVERRIDE_FILE="${CACHEDIR}/cached_module_override_panels.json"

[ -d "${MODULEDIR}" ] || exit 1

[ -d "${CACHEDIR}" ] || mkdir -p "${CACHEDIR}"

################################################################################

NODE_PAT='/^OMV.WorkspaceManager.registerNode[0-9a-zA-Z]*\({/,/}\);/'
PANEL_PAT='/^OMV.WorkspaceManager.registerPanel[0-9a-zA-Z]*\({/,/}\);/'

NODE_STRIP_PAT1='s/[[:space:]]*OMV.WorkspaceManager.register[0-9a-zA-Z]*({//'
NODE_STRIP_PAT2='s/,*[[:space:]]*});*[[:space:]]*$//'
#NODE_STRIP_PAT3='s/[[:space:]]*\(.*\):[[:space:]]*_(\(.*\))[[:space:]]*,\{0,1\}/\1: \2,/'

FULLPATH_FUNCTION=$(cat <<EOF
function p(a){
	a.forEach(function(b){
		if(typeof b.id != 'undefined' && typeof b.path != 'undefined'){
			b.fullpath = (b.path==="/")?b.path+b.id:b.path+'/'+b.id;
		}
	});
	return a;
};
EOF
)

OVERRIDE_FUNCTION=$(cat <<EOF
function override(nodes, overrides) {
	var PANEL_RESULT = [];
	if (typeof nodes != 'undefined') {
		nodes.forEach(function(node) {
			if (typeof overrides != 'undefined') {
				overrides.forEach(function(override) {
					if (node.id===override.id && node.path===override.path) {
						if (typeof override.file != 'undefined') {
							node.file = override.file;
						}
						if (typeof override.type != 'undefined') {
							node.type = override.type;
						}
						if (typeof override.del != 'undefined') {
							node.del = override.del;
						}
						if (typeof override.newid != 'undefined') {
							node.newid = override.newid;
						}
						if (typeof override.newpath != 'undefined') {
							node.newpath = override.newpath;
						}
						if (typeof override.position != 'undefined') {
							node.position = override.position;
						}
						if (typeof override.text != 'undefined') {
							node.text = override.text;
						}
						if (typeof override.icon16 != 'undefined') {
							node.icon16 = override.icon16;
						}
						if (typeof override.iconSvg != 'undefined') {
							node.iconSvg = override.iconSvg;
						}
						if (typeof override.className != 'undefined') {
							node.className = override.className;
						}
					}
				});
			}
			PANEL_RESULT.push(node);
		});
	}
	return PANEL_RESULT;
}
EOF
)

################################################################################

function _scan_dir() {
	local FOLDER="$1"
	local SEARCH_PAT="$2"
	local APPEND="${3}"
	local FILES=$(find ${FOLDER} -type f -name "*.js")
	local VALUES=""
	for FILE in ${FILES}; do
		FILE_CONTENT=$(cat "${FILE}")
		NODES=$(echo "${FILE_CONTENT}" | awk "${SEARCH_PAT}" | sed -e "s|^//.*$||" | tr '\n' ' ')
		NODES_CNT=`expr $(echo "${NODES}" | awk -F";" '{print NF}') - 1`
		while [ ${NODES_CNT} -gt 0 ]; do
			NODE=$(echo "${NODES}" | awk -F";" "{print \$${NODES_CNT}}")
			STRIPPED=$(echo "${NODE}" | sed -e "${NODE_STRIP_PAT1}" -e "${NODE_STRIP_PAT2}") #-e "${NODE_STRIP_PAT3}")
			VALUES+="{file:\"${FILE}\",${APPEND},${STRIPPED}},"
			NODES_CNT=$(expr ${NODES_CNT} - 1)
		done
	done
	echo "${VALUES}"
}

function scan_dir() {
	local FOLDER="$1"
	local SEARCH_PAT="$2"
	local APPEND="${3}"
	local VALUES=$(_scan_dir "${FOLDER}" "${SEARCH_PAT}" "${APPEND}")
	JSONSTR=$(echo "function _(s){return s;}; ${FULLPATH_FUNCTION} var o = [${VALUES}]; console.log(JSON.stringify(p(o)));" | node)
	[ "$?" == 0 ] && echo "${JSONSTR}"
}

function scan_dirs() {
	local FOLDERS="$1"
	local SEARCH_PAT="$2"
	local APPEND="${3}"
	local VALUES=""
	for FOLDER in ${FOLDERS}; do
		VALUES+=$(_scan_dir "${FOLDER}" "${SEARCH_PAT}" "${APPEND}")
	done
	JSONSTR=$(echo "function _(s){return s;}; ${FULLPATH_FUNCTION} var o = [${VALUES}]; console.log(JSON.stringify(p(o)));" | node)
	[ "$?" == 0 ] && echo "${JSONSTR}"
}

################################################################################

function clean_cache() {
	rm -f "${NODE_CACHE_FILE}" "${PANEL_CACHE_FILE}"
}
function clean_override_cache() {
	rm -f "${NODE_OVERRIDE_FILE}" "${PANEL_OVERRIDE_FILE}"
}

function generate_cache() {
	scan_dir "${MODULEDIR}" "${NODE_PAT}" 'type:1' >> "${NODE_CACHE_FILE}"
	scan_dir "${MODULEDIR}" "${PANEL_PAT}" 'type:2' >> "${PANEL_CACHE_FILE}"
}
function generate_override_cache() {
	scan_dir "${OVERRIDEDIR}" "${NODE_PAT}" 'type:3' >> "${NODE_OVERRIDE_FILE}"
	scan_dir "${OVERRIDEDIR}" "${PANEL_PAT}" 'type:4' >> "${PANEL_OVERRIDE_FILE}"
}

################################################################################

function list_node_entrys() {
	cat "${NODE_CACHE_FILE}"
}
function list_panels_entrys() {
	cat "${NODE_CACHE_FILE}"
}

function list_node_overrides() {
	cat "${NODE_OVERRIDE_FILE}"
}
function list_panels_overrides() {
	cat "${PANEL_OVERRIDE_FILE}"
}

function list_nodes() {
	NODES=$(cat "${NODE_CACHE_FILE}")
	NODES_OVERRIDE=$(cat "${NODE_OVERRIDE_FILE}")
	(cat <<EOF
var NODES = ${NODES};
var NODES_OVERRIDE = ${NODES_OVERRIDE};
${OVERRIDE_FUNCTION}
console.log(JSON.stringify(override(NODES, NODES_OVERRIDE)));
EOF
) | node
}
function list_panels() {
	PANELS=$(cat "${PANEL_CACHE_FILE}")
	PANELS_OVERRIDE=$(cat "${PANEL_OVERRIDE_FILE}")
	(cat <<EOF
var PANELS = ${PANELS};
var PANELS_OVERRIDE = ${PANELS_OVERRIDE};
${OVERRIDE_FUNCTION}
console.log(JSON.stringify(override(PANELS, PANELS_OVERRIDE)));
EOF
) | node
}

function list_all() {
	PANELS=$(cat "${PANEL_CACHE_FILE}")
	PANELS_OVERRIDE=$(cat "${PANEL_OVERRIDE_FILE}")
	NODES=$(cat "${NODE_CACHE_FILE}")
	NODES_OVERRIDE=$(cat "${NODE_OVERRIDE_FILE}")
	(cat <<EOF
var NODES = ${NODES};
var NODES_OVERRIDE = ${NODES_OVERRIDE};
var PANELS = ${PANELS};
var PANELS_OVERRIDE = ${PANELS_OVERRIDE};
${OVERRIDE_FUNCTION}
var N = override(NODES, NODES_OVERRIDE);
var P = override(PANELS, PANELS_OVERRIDE);
console.log(JSON.stringify(N.concat(P)));
EOF
) | node
}

################################################################################

[ "${CLEAN}" == "0" ] && clean_cache
[ "${CLEAN_OVERRIDES}" == "0" ] && clean_override_cache

if [ ! -f "${NODE_CACHE_FILE}" ] || [ ! -f "${PANEL_CACHE_FILE}" ]; then
	clean_cache
	generate_cache
fi

if [ ! -f "${NODE_OVERRIDE_FILE}" ] || [ ! -f "${PANEL_OVERRIDE_FILE}" ]; then
	clean_override_cache
	generate_override_cache
fi

[ "${LIST_NODE_ENTRYS}" == "0" ] && list_node_entrys && exit 0
[ "${LIST_PANEL_ENTRYS}" == "0" ] && list_panels_entrys && exit 0

[ "${LIST_NODE_OVERRIDES}" == "0" ] && list_node_overrides && exit 0
[ "${LIST_PANEL_OVERRIDES}" == "0" ] && list_panels_overrides && exit 0

[ "${LIST_NODE}" == "0" ] && list_nodes && exit 0
[ "${LIST_PANEL}" == "0" ] && list_panels && exit 0

[ "${LIST_ALL}" == "0" ] && list_all && exit 0

################################################################################

exit 0

################################################################################
